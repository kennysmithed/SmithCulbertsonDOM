my.colours <- c("#808080","#EA7D00","#006DE9")
#load exp1 data
exp1DataB <- read.csv('../RawData/evccBRawData.csv')
exp1DataF <- read.csv('../RawData/evccFRawData.csv')
#remove some columns from F data that don't appear in B
exp1DataF$condition <- NULL
exp1DataF$nNouns <- NULL
exp1DataB$AgentsCanBePatients <- 'Agents Can Be Patients'
exp1DataF$AgentsCanBePatients <- 'Agents Cannot Be Patients'
exp1Data <- rbind(exp1DataB,exp1DataF)
#load exp 2 data
exp2Data <- read.csv('../RawData/evccCDRawData.csv')
exp2Data$AgentsCanBePatients <- ifelse(exp2Data$condition=='ks','Agents Can Be Patients','Agents Cannot Be Patients')
exp2Data$AgentsCanBePatients <- relevel(as.factor(exp2Data$AgentsCanBePatients),ref='Agents Cannot Be Patients')
#load exp 3 data
exp3EData <- read.csv('../RawData/evccERawData.csv') #Masha events
exp3EData$gender <- NULL #need to add these
exp3EData$age <- NULL
exp3GData <- read.csv('../RawData/evccGRawData.csv') #Our events
exp3GData <- exp3GData[,colnames(exp3EData)]
exp3EData$AgentsCanBePatients <- "Agents Cannot Be Patients"
exp3GData$AgentsCanBePatients <- "Agents Can Be Patients"
exp3Data <- rbind(exp3EData,exp3GData)
exp1Data$isSOV <- ifelse(exp1Data$simplewordorder=='SOV',1,0)
exp1Data$day <- as.factor(exp1Data$day)
exp1Data$AgentsCanBePatients <- relevel(as.factor(exp1Data$AgentsCanBePatients),
ref='Agents Cannot Be Patients')
exp2Data$isSOV <- ifelse(exp2Data$simplewordorder=='SOV',1,0)
exp2Data$day <- as.factor(exp2Data$day)
exp2Data$patient.is.animate <- factor(exp2Data$patient.is.animate)
#binary coding of word order
exp3Data$isSOV <- ifelse(exp3Data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp3Data$day <- as.factor(exp3Data$day)
#Agents Cannot Be Patients needs to be reference level
exp3Data$AgentsCanBePatients <- as.factor(exp3Data$AgentsCanBePatients)
exp3Data$AgentsCanBePatients <- relevel(exp3Data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
#load exp 4 data
exp4HData <- read.csv('../RawData/evccHRawData.csv') #Masha events only for this experiment
exp4HData$gender <- NULL
exp4HData$age <- NULL
exp4HData$AgentsCanBePatients <- "Agents Cannot Be Patients"
exp4IData <- read.csv('../RawData/evccIRawData.csv') #Masha events only for this experiment
exp4IData$gender <- NULL
exp4IData$age <- NULL
exp4IData$AgentsCanBePatients <- "Agents Can Be Patients"
exp4Data <- rbind(exp4HData,exp4IData)
#binary coding of word order
exp4Data$isSOV <- ifelse(exp4Data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp4Data$day <- as.factor(exp4Data$day)
#Agents Cannot Be Patients needs to be reference level
exp4Data$AgentsCanBePatients <- as.factor(exp4Data$AgentsCanBePatients)
exp4Data$AgentsCanBePatients <- relevel(exp4Data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
exp4Data$patient.is.animate <- as.factor(exp4Data$patient.is.animate)
#equalizing the columns
exp1Data$Experiment <- "Experiment 1"
exp2Data$Experiment <- "Experiment 2"
exp3Data$Experiment <- "Experiment 3"
exp4Data$Experiment <- "Experiment 4"
shared.cols <- intersect(intersect(intersect(colnames(exp1Data),colnames(exp2Data)),
colnames(exp3Data)),
colnames(exp4Data))
exp1.to.4.data <- rbind(exp1Data[,shared.cols], exp2Data[,shared.cols],
exp3Data[,shared.cols],exp4Data[,shared.cols])
#binary coding of word order
exp1.to.4.data$isSOV <- ifelse(exp1.to.4.data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp1.to.4.data$day <- as.factor(exp1.to.4.data$day)
exp1.to.4.data$Experiment<-as.factor(exp1.to.4.data$Experiment)
#Agents Cannot Be Patients needs to be reference level
exp1.to.4.data$AgentsCanBePatients <- as.factor(exp1.to.4.data$AgentsCanBePatients)
exp1.to.4.data$AgentsCanBePatients <- relevel(exp1.to.4.data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
exp1.to.4.data$patient.is.animate <- as.factor(exp1.to.4.data$patient.is.animate)
#add factors:
#ProportionCaseMarked (>50 for Exps 1 and 4, <50 for Exps 2 and 3),
#OrderMarkedMore (SOV for Exps 1 and 3, OSV for Exps 2 and 4)
exp1.to.4.data$ProportionCaseMarked <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"=">50",
"Experiment 2"="<50",
"Experiment 3"="<50",
"Experiment 4"=">50"))
exp1.to.4.data$OrderMarkedMore <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"="SOV",
"Experiment 2"="OSV",
"Experiment 3"="SOV",
"Experiment 4"="OSV"))
exp1.to.4.data$MajorityInputOrder <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"="SOV",
"Experiment 2"="SOV",
"Experiment 3"="OSV",
"Experiment 4"="OSV"))
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.to.4.counts.table <- ddply(exp1.to.4.data,~day,summarise,N=length(unique(workerId)))
exp1.to.4.counts.table
exp1.to.4.scores.by.block <- aggregate(score~workerId+day+block,data=exp1.to.4.data,FUN=mean)
exp1.to.4.failed.noun.comprehension <- subset(exp1.to.4.scores.by.block,block=='NounComprehension2' & score<0.7)
exp1.to.4.failed.sentence.comprehension <- subset(exp1.to.4.scores.by.block,block=='SentenceComprehension1' & score<0.7)
ddply(exp1.to.4.failed.sentence.comprehension,~day,summarise,N_excluded=length(unique(workerId)))
exp3.and.4.data <- droplevels(subset(exp1.to.4.data,(Experiment=="Experiment 3" | Experiment=="Experiment 4")))
exp3.and.4.data$patient.is.animate <- factor(exp3.and.4.data$patient.is.animate)
contrasts(exp3.and.4.data$patient.is.animate) <- c(-0.5,0.5)
contrasts(exp3.and.4.data$Experiment) <- c(-0.5,0.5)
#This would be the stat for the full manipulation
#contrasts(exp1.to.4.data$AgentsCanBePatients) <- c(-0.5,0.5)
#exp1.to.4.case.marking.model.1 <- glmer(casemarked ~ patient.is.animate * AgentsCanBePatients* day + (1 + patient.is.animate * day | workerId),data=subset(exp1.to.4.data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
exp3.and.4.case.marking.model.1 <- glmer(casemarked ~ patient.is.animate * day * Experiment  + (1 + patient.is.animate * day | workerId),data=subset(exp3.and.4.data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp3.and.4.case.marking.model.1)
head(exp1.to.4.recall.vs.interaction.summary)
head(exp1.to.4.proportion)
head(exp1.to.4.data)
#for casemarking
exp1.to.4.casemarking <- aggregate(casemarked~AgentsCanBePatients+day+block+workerId,data=subset(exp1.to.4.data,day==4 & (block=="SentenceTest1" | block=="InteractionDirect") & grammatical),FUN=mean)
#now merge
exp1.to.4.entropy.marking <- merge(exp1.to.4.proportion.sov,exp1.to.4.casemarking,
by=c("workerId","AgentsCanBePatients","block"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
library(gridExtra) #for the by-participant bar plots
#library(kableExtra)
library(broom) #for formatting lmer summary tables
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
#load exp1 data
exp1DataB <- read.csv('../RawData/evccBRawData.csv')
exp1DataF <- read.csv('../RawData/evccFRawData.csv')
#remove some columns from F data that don't appear in B
exp1DataF$condition <- NULL
exp1DataF$nNouns <- NULL
exp1DataB$AgentsCanBePatients <- 'Agents Can Be Patients'
exp1DataF$AgentsCanBePatients <- 'Agents Cannot Be Patients'
exp1Data <- rbind(exp1DataB,exp1DataF)
#load exp 2 data
exp2Data <- read.csv('../RawData/evccCDRawData.csv')
exp2Data$AgentsCanBePatients <- ifelse(exp2Data$condition=='ks','Agents Can Be Patients','Agents Cannot Be Patients')
exp2Data$AgentsCanBePatients <- relevel(as.factor(exp2Data$AgentsCanBePatients),ref='Agents Cannot Be Patients')
#load exp 3 data
exp3EData <- read.csv('../RawData/evccERawData.csv') #Masha events
exp3EData$gender <- NULL #need to add these
exp3EData$age <- NULL
exp3GData <- read.csv('../RawData/evccGRawData.csv') #Our events
exp3GData <- exp3GData[,colnames(exp3EData)]
exp3EData$AgentsCanBePatients <- "Agents Cannot Be Patients"
exp3GData$AgentsCanBePatients <- "Agents Can Be Patients"
exp3Data <- rbind(exp3EData,exp3GData)
exp1Data$isSOV <- ifelse(exp1Data$simplewordorder=='SOV',1,0)
exp1Data$day <- as.factor(exp1Data$day)
exp1Data$AgentsCanBePatients <- relevel(as.factor(exp1Data$AgentsCanBePatients),
ref='Agents Cannot Be Patients')
exp2Data$isSOV <- ifelse(exp2Data$simplewordorder=='SOV',1,0)
exp2Data$day <- as.factor(exp2Data$day)
exp2Data$patient.is.animate <- factor(exp2Data$patient.is.animate)
#binary coding of word order
exp3Data$isSOV <- ifelse(exp3Data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp3Data$day <- as.factor(exp3Data$day)
#Agents Cannot Be Patients needs to be reference level
exp3Data$AgentsCanBePatients <- as.factor(exp3Data$AgentsCanBePatients)
exp3Data$AgentsCanBePatients <- relevel(exp3Data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
#load exp 4 data
exp4HData <- read.csv('../RawData/evccHRawData.csv') #Masha events only for this experiment
exp4HData$gender <- NULL
exp4HData$age <- NULL
exp4HData$AgentsCanBePatients <- "Agents Cannot Be Patients"
exp4IData <- read.csv('../RawData/evccIRawData.csv') #Masha events only for this experiment
exp4IData$gender <- NULL
exp4IData$age <- NULL
exp4IData$AgentsCanBePatients <- "Agents Can Be Patients"
exp4Data <- rbind(exp4HData,exp4IData)
#binary coding of word order
exp4Data$isSOV <- ifelse(exp4Data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp4Data$day <- as.factor(exp4Data$day)
#Agents Cannot Be Patients needs to be reference level
exp4Data$AgentsCanBePatients <- as.factor(exp4Data$AgentsCanBePatients)
exp4Data$AgentsCanBePatients <- relevel(exp4Data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
exp4Data$patient.is.animate <- as.factor(exp4Data$patient.is.animate)
#equalizing the columns
exp1Data$Experiment <- "Experiment 1"
exp2Data$Experiment <- "Experiment 2"
exp3Data$Experiment <- "Experiment 3"
exp4Data$Experiment <- "Experiment 4"
shared.cols <- intersect(intersect(intersect(colnames(exp1Data),colnames(exp2Data)),
colnames(exp3Data)),
colnames(exp4Data))
exp1.to.4.data <- rbind(exp1Data[,shared.cols], exp2Data[,shared.cols],
exp3Data[,shared.cols],exp4Data[,shared.cols])
#binary coding of word order
exp1.to.4.data$isSOV <- ifelse(exp1.to.4.data$simplewordorder=='SOV',1,0)
#day needs to be a factor for the stats
exp1.to.4.data$day <- as.factor(exp1.to.4.data$day)
exp1.to.4.data$Experiment<-as.factor(exp1.to.4.data$Experiment)
#Agents Cannot Be Patients needs to be reference level
exp1.to.4.data$AgentsCanBePatients <- as.factor(exp1.to.4.data$AgentsCanBePatients)
exp1.to.4.data$AgentsCanBePatients <- relevel(exp1.to.4.data$AgentsCanBePatients,
ref="Agents Cannot Be Patients")
exp1.to.4.data$patient.is.animate <- as.factor(exp1.to.4.data$patient.is.animate)
#add factors:
#ProportionCaseMarked (>50 for Exps 1 and 4, <50 for Exps 2 and 3),
#OrderMarkedMore (SOV for Exps 1 and 3, OSV for Exps 2 and 4)
exp1.to.4.data$ProportionCaseMarked <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"=">50",
"Experiment 2"="<50",
"Experiment 3"="<50",
"Experiment 4"=">50"))
exp1.to.4.data$OrderMarkedMore <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"="SOV",
"Experiment 2"="OSV",
"Experiment 3"="SOV",
"Experiment 4"="OSV"))
exp1.to.4.data$MajorityInputOrder <- plyr::revalue(exp1.to.4.data$Experiment,
c("Experiment 1"="SOV",
"Experiment 2"="SOV",
"Experiment 3"="OSV",
"Experiment 4"="OSV"))
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.to.4.counts.table <- ddply(exp1.to.4.data,~day,summarise,N=length(unique(workerId)))
exp1.to.4.counts.table
exp1.to.4.scores.by.block <- aggregate(score~workerId+day+block,data=exp1.to.4.data,FUN=mean)
exp1.to.4.failed.noun.comprehension <- subset(exp1.to.4.scores.by.block,block=='NounComprehension2' & score<0.7)
exp1.to.4.failed.sentence.comprehension <- subset(exp1.to.4.scores.by.block,block=='SentenceComprehension1' & score<0.7)
ddply(exp1.to.4.failed.sentence.comprehension,~day,summarise,N_excluded=length(unique(workerId)))
exp1.to.4.sov.summary.by.animacy <- aggregate(isSOV~AgentsCanBePatients+patient.is.animate+day+workerId,data=subset(exp1.to.4.data,block=="SentenceTest1" & grammatical),FUN=mean)
#this is aggregating over animacy
exp1.to.4.sov.summary.total <- aggregate(isSOV~day+workerId,data=subset(exp1.to.4.data,block=="SentenceTest1" & grammatical),FUN=mean)
#needs to have this column for plotting compatability with casemarking.summary.by.animacy
exp1.to.4.sov.summary.total$patient.is.animate <- "All"
ggplot(data=exp1.to.4.sov.summary.by.animacy, aes(x=day, y=isSOV, fill=patient.is.animate)) +
#bars and CIs for word order by animacy
stat_summary(geom='bar', fun.y='mean', position=position_dodge(0.9)) +
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
#point 95CI for grand means
stat_summary(data=exp1.to.4.sov.summary.total,aes(x=day,y=isSOV),geom='point', fun.y='mean', position=position_dodge(0.9),shape=18,size=4,color='darkgrey',show.legend = FALSE) +
stat_summary(data=exp1.to.4.sov.summary.total,aes(x=day,y=isSOV),geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.15,position=position_dodge(0.9),color='darkgrey',show.legend = FALSE) +
#horizontal line showing input
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(aes(x=day, y=isSOV, shape=patient.is.animate),binaxis = "y", stackdir = "center",alpha=0.2,dotsize=1,position=position_dodge(0.9),fill='black',binpositions='all',binwidth=1/100) +
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
ylab("Proportion of SOV sentences") +
theme(legend.title=element_blank()) +
scale_fill_manual(values=my.colours,breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1to4-wordorder-mashaplot.pdf",width=9, height=6)
exp1.to.4.casemarking.summary.by.animacy <- aggregate(casemarked~patient.is.animate+day+AgentsCanBePatients+workerId,data=subset(exp1.to.4.data,block=="SentenceTest1" & grammatical),FUN=mean)
#this is aggregating over animacy
exp1.to.4.casemarking.summary.total <- aggregate(casemarked~day+AgentsCanBePatients+workerId,data=subset(exp1.to.4.data,block=="SentenceTest1" & grammatical),FUN=mean)
#needs to have this column for plotting compatability with casemarking.summary.by.animacy
exp1.to.4.casemarking.summary.total$patient.is.animate <- "All"
#a plot with:
#bars and 95% CIs for mean case marking by animacy
#dotplot for by-participant means
#additional point and 95% CI for casemarking collapsing over animacy
#NB a weird thing about dotplot: unless I repeat the aes and add in a spurious "shape" value, it seems
#to collapse the dotplot across animacy values. I don't know why, and I don't know why this solution works.
ggplot(data=exp1.to.4.casemarking.summary.by.animacy, aes(x=day, y=casemarked, fill=patient.is.animate)) +
#bars and CIs for casemarking by animacy
stat_summary(geom='bar', fun.y='mean', position=position_dodge(0.9)) +
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
#point 95CI for grand means
stat_summary(data=exp1.to.4.casemarking.summary.total,aes(x=day,y=casemarked),geom='point', fun.y='mean', position=position_dodge(0.9),shape=18,size=4,color='darkgrey',show.legend = FALSE) +
stat_summary(data=exp1.to.4.casemarking.summary.total,aes(x=day,y=casemarked),geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.15,position=position_dodge(0.9),color='darkgrey',show.legend = FALSE) +
#horizontal line showing input
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(aes(x=day, y=casemarked, shape=patient.is.animate),binaxis = "y", stackdir = "center",alpha=0.2,dotsize=1,position=position_dodge(0.9),fill='black',binpositions='all',binwidth=1/100) +
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
ylab("Proportion of case-marked patients") +
theme(legend.title=element_blank()) +
scale_fill_manual(values=my.colours,breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1to4-casemarking-mashaplot.pdf",width=9, height=6)
#since there is some data munging here, will set this up as a seperate data frame
exp1.to.4RecallVsInteractionData <- subset(exp1.to.4.data,(block=="InteractionDirect" | block=="SentenceTest1") & grammatical & day==4)
#want recall to be the reference level
exp1.to.4RecallVsInteractionData$block <- relevel(droplevels(exp1.to.4RecallVsInteractionData$block),ref="SentenceTest1")
exp1.to.4.recall.vs.interaction.summary <- aggregate(casemarked~patient.is.animate+block+AgentsCanBePatients+workerId,data=exp1.to.4RecallVsInteractionData,FUN=mean)
#this is aggregating over animacy
exp1.to.4.recall.vs.interaction.summary.total <- aggregate(casemarked~block+AgentsCanBePatients+workerId,data=exp1.to.4RecallVsInteractionData,FUN=mean)
#prettier names for printing
exp1.to.4.recall.vs.interaction.summary$block <- revalue(exp1.to.4.recall.vs.interaction.summary$block,
c("SentenceTest1"="Recall",
"InteractionDirect"="Interaction"))
exp1.to.4.recall.vs.interaction.summary.total$block <- revalue(exp1.to.4.recall.vs.interaction.summary.total$block,
c("SentenceTest1"="Recall",
"InteractionDirect"="Interaction"))
exp1.to.4.recall.vs.interaction.summary.total$patient.is.animate <- "All"
#a plot with:
#bars and 95% CIs for mean case marking by animacy
#dotplot for by-participant means
#additional point and 95% CI for casemarking collapsing over animacy
ggplot(data=exp1.to.4.recall.vs.interaction.summary, aes(x=block, y=casemarked, fill=patient.is.animate)) +
facet_grid(~AgentsCanBePatients) +
#bars and CIs for casemarking by animacy
stat_summary(geom='bar', fun.y='mean', position=position_dodge(0.9)) +
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
#point 95CI for grand means
stat_summary(data=exp1.to.4.recall.vs.interaction.summary.total,aes(x=block,y=casemarked),geom='point', fun.y='mean', position=position_dodge(0.9),shape=18,size=4,color='darkgrey',show.legend = FALSE) +
stat_summary(data=exp1.to.4.recall.vs.interaction.summary.total,aes(x=block,y=casemarked),geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.15,position=position_dodge(0.9),color='darkgrey',show.legend = FALSE) +
#horizontal line showing input
geom_hline(yintercept=0.6,linetype=3) +
#by-participant data
geom_dotplot(aes(x=block, y=casemarked, shape=patient.is.animate),binaxis = "y", stackdir = "center",alpha=0.2,dotsize=1,position=position_dodge(0.9),fill='black',binpositions='all',binwidth=1/100) +
#then various axis/legend stuff
xlab("Block") +
theme_bw() +
ylab("Proportion of case-marked patients") +
theme(legend.title=element_blank()) +
scale_fill_manual(values=my.colours,breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1to4-interaction.pdf",width=9, height=6)
#add by-participant trial counter, setting first direct trial as 1
exp1.to.4interaction.direct.data <- subset(exp1.to.4RecallVsInteractionData,block=="InteractionDirect")
exp1.to.4interaction.direct.data$trialNumber <- plyr::ddply(exp1.to.4interaction.direct.data, plyr::.(workerId), plyr::mutate, id = seq_along(trialn))$id
exp1.to.4interaction.direct.data$casemarked <- as.numeric(exp1.to.4interaction.direct.data$casemarked)
ggplot(exp1.to.4interaction.direct.data,aes(x=trialNumber,y=casemarked,colour=patient.is.animate)) +
facet_grid(~AgentsCanBePatients) +
stat_summary(geom='line', fun.y='mean', position=position_dodge(0.9)) #+
#stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black')
#try smoothing for the plot
exp1.to.4interaction.direct.data$trialNumberBinned <- (exp1.to.4interaction.direct.data$trialNumber-1) %/% 5
ggplot(exp1.to.4interaction.direct.data,aes(x=trialNumberBinned,y=casemarked,colour=patient.is.animate)) +
facet_grid(~AgentsCanBePatients) +
stat_summary(geom='line', fun.y='mean') +
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3) +
scale_x_continuous(breaks=0:7,labels=c("1-5","6-10","11-15","16-20","21-25","26-30","30-35","36-40"))
exp1.to.4.proportion.sov <- aggregate(isSOV~AgentsCanBePatients+day+block+workerId,data=subset(exp1.to.4.data,day==4 & (block=="SentenceTest1" | block=="InteractionDirect") & grammatical),FUN=mean)
exp1.to.4.proportion.sov$block <- revalue(exp1.to.4.proportion.sov$block,
c("SentenceTest1"="Recall",
"InteractionDirect"="Interaction"))
exp1.to.4.proportion.sov$block <- relevel(exp1.to.4.proportion.sov$block,ref="Recall")
#add word order entropy
exp1.to.4.proportion.sov$Entropy <- mapply(function(p) ifelse(p==0|p==1,0,(-p*log2(p)) + (-(1-p)*log2(1-p))),
exp1.to.4.proportion.sov$isSOV)
#OK, for DOM score can use existing exp1.to.4.recall.vs.interaction.summary as basis
#but need to calculate diffs - easiest way is to make 2 columns giving % casemarked for animate and inanimate patients
exp1.to.4.domscore <- tidyr::spread(exp1.to.4.recall.vs.interaction.summary,patient.is.animate,casemarked)
exp1.to.4.domscore$DOM <- exp1.to.4.domscore$'TRUE' - exp1.to.4.domscore$'FALSE'
exp1.to.4.domscore$'FALSE' <- NULL
exp1.to.4.domscore$'TRUE' <- NULL
#now merge
exp1.to.4.entropy.dom <- merge(exp1.to.4.proportion.sov,exp1.to.4.domscore,
by=c("workerId","AgentsCanBePatients","block"))
#and plot
ggplot(exp1.to.4.entropy.dom,aes(x=Entropy,y=DOM)) +
facet_grid(AgentsCanBePatients~block) +
geom_point()
#for casemarking
exp1.to.4.casemarking <- aggregate(casemarked~AgentsCanBePatients+day+block+workerId,data=subset(exp1.to.4.data,day==4 & (block=="SentenceTest1" | block=="InteractionDirect") & grammatical),FUN=mean)
#now merge
exp1.to.4.entropy.marking <- merge(exp1.to.4.proportion.sov,exp1.to.4.casemarking,
by=c("workerId","AgentsCanBePatients","block"))
#and plot
ggplot(exp1.to.4.entropy.marking,aes(x=Entropy,y=casemarked)) +
facet_grid(AgentsCanBePatients~block) +
geom_point()
head(exp1.to.4.entropy.marking)
head(exp1.to.4.proportion.sov)
#for casemarking
exp1.to.4.casemarking <- aggregate(casemarked~AgentsCanBePatients+day+block+workerId,data=subset(exp1.to.4.data,day==4 & (block=="SentenceTest1" | block=="InteractionDirect") & grammatical),FUN=mean)
exp1.to.4.casemarking
head(exp1.to.4.casemarking)
head(exp1.to.4.proportion.sov)
exp1.to.4.casemarking$block <- revalue(exp1.to.4.casemarking$block,
c("SentenceTest1"="Recall",
"InteractionDirect"="Interaction"))
exp1.to.4.casemarking$block <- relevel(exp1.to.4.casemarking$block,ref="Recall")
#now merge
exp1.to.4.entropy.marking <- merge(exp1.to.4.proportion.sov,exp1.to.4.casemarking,
by=c("workerId","AgentsCanBePatients","block"))
head(exp1.to.4.entropy.marking)
#and plot
ggplot(exp1.to.4.entropy.marking,aes(x=Entropy,y=casemarked)) +
facet_grid(AgentsCanBePatients~block) +
geom_point()
summary(lmer(casemarked~Entropy * block * AgentsCanBePatients + (1 | workerId), data=exp1.to.4.entropy.dom))
summary(lmer(casemarked~Entropy * block * AgentsCanBePatients + (1 | workerId), data=exp1.to.4.entropy.marking))
summary(lmer(casemarked~Entropy * block * AgentsCanBePatients + (1 | workerId), data=subset(exp1.to.4.entropy.marking,Entropy>0)))
#and plot
ggplot(exp1.to.4.entropy.marking,aes(x=Entropy,y=casemarked)) +
facet_grid(AgentsCanBePatients~block) +
geom_point(alpha=0.5)
#and plot
ggplot(exp1.to.4.entropy.marking,aes(x=Entropy,y=casemarked)) +
facet_grid(~block) +
geom_point(alpha=0.5)
contrasts(exp1.to.4.entropy.marking)
contrasts(exp1.to.4.entropy.marking$AgentsCanBePatients)
contrasts(exp1.to.4.entropy.marking$AgentsCanBePatients) <- c(-0.5,0.5)
contrasts(exp1.to.4.entropy.marking$AgentsCanBePatients)
summary(lmer(casemarked~Entropy * block * AgentsCanBePatients + (1 | workerId), data=exp1.to.4.entropy.marking))
summary(lmer(casemarked~Entropy * block * AgentsCanBePatients + (1 | workerId), data=subset(exp1.to.4.entropy.marking,Entropy>0)))
knitr::opts_chunk$set(echo = TRUE)
options(width = 250)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
library(stargazer)
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
#load exp1 data
exp1Data <- read.csv('../RawData/exp1Data.csv')
exp2Data <- read.csv('../RawData/exp2Data.csv')
exp3Data <- read.csv('../RawData/exp3Data.csv')
exp1.to.3.data <- rbind(exp1Data, exp2Data, exp3Data)
#dset everything to factors
exp1.to.3.data$Day <- as.factor(exp1.to.3.data$Day)
exp1.to.3.data$Experiment<-as.factor(exp1.to.3.data$Experiment)
exp1.to.3.data$Animacy <- as.factor(exp1.to.3.data$Animacy)
exp1.to.3.data$ProportionMarked <- as.factor(exp1.to.3.data$ProportionMarked)
#force 40% as reference level
exp1.to.3.data$ProportionMarked <- relevel(exp1.to.3.data$ProportionMarked,ref="40% Casemarked")
#force OSV as reference level
exp1.to.3.data$MajorityInputOrder <- as.factor(exp1.to.3.data$MajorityInputOrder)
exp1.to.3.data$MajorityInputOrder <- relevel(exp1.to.3.data$MajorityInputOrder,ref="OSV majority order")
exp1.to.3.data$OrderMarkedMore <- as.factor(exp1.to.3.data$OrderMarkedMore)
exp1.to.3.data$OrderMarkedMore <- relevel(exp1.to.3.data$OrderMarkedMore,ref="OSV marked more")
#at some point we switched terminology in the paper from Agents Can/Cannot be Patients to Subjects Can/Cannot Be Objects - need to correct this throughout
exp3Data$EventType <- revalue(exp3Data$EventType,
c("Agents Cannot Be Patients"="Subjects Cannot Be Objects",
"Agents Can Be Patients"="Subjects Can Be Objects"))
#Subjects Cannot Be Objects needs to be reference level
exp1.to.3.data$EventType <- as.factor(exp1.to.3.data$EventType)
exp1.to.3.data$EventType <- relevel(exp1.to.3.data$EventType,
ref="Subjects Cannot Be Objects")
knitr::opts_chunk$set(echo = TRUE)
options(width = 250)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
library(stargazer)
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
#load exp1 data
exp1Data <- read.csv('../RawData/exp1Data.csv')
exp2Data <- read.csv('../RawData/exp2Data.csv')
exp3Data <- read.csv('../RawData/exp3Data.csv')
exp1.to.3.data <- rbind(exp1Data, exp2Data, exp3Data)
#dset everything to factors
exp1.to.3.data$Day <- as.factor(exp1.to.3.data$Day)
exp1.to.3.data$Experiment<-as.factor(exp1.to.3.data$Experiment)
exp1.to.3.data$Animacy <- as.factor(exp1.to.3.data$Animacy)
exp1.to.3.data$ProportionMarked <- as.factor(exp1.to.3.data$ProportionMarked)
#force 40% as reference level
exp1.to.3.data$ProportionMarked <- relevel(exp1.to.3.data$ProportionMarked,ref="40% Casemarked")
#force OSV as reference level
exp1.to.3.data$MajorityInputOrder <- as.factor(exp1.to.3.data$MajorityInputOrder)
exp1.to.3.data$MajorityInputOrder <- relevel(exp1.to.3.data$MajorityInputOrder,ref="OSV majority order")
exp1.to.3.data$OrderMarkedMore <- as.factor(exp1.to.3.data$OrderMarkedMore)
exp1.to.3.data$OrderMarkedMore <- relevel(exp1.to.3.data$OrderMarkedMore,ref="OSV marked more")
#at some point we switched terminology in the paper from Agents Can/Cannot be Patients to Subjects Can/Cannot Be Objects - need to correct this throughout
exp1.to.3.data$EventType <- revalue(exp1.to.3.data$EventType,
c("Agents Cannot Be Patients"="Subjects Cannot Be Objects",
"Agents Can Be Patients"="Subjects Can Be Objects"))
#Subjects Cannot Be Objects needs to be reference level
exp1.to.3.data$EventType <- as.factor(exp1.to.3.data$EventType)
exp1.to.3.data$EventType <- relevel(exp1.to.3.data$EventType,
ref="Subjects Cannot Be Objects")
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.to.3.counts.table <- ddply(exp1.to.3.data,~Day,summarise,N=length(unique(workerId)))
exp1.to.3.counts.table
exp1.to.3.scores.by.block <- aggregate(score~workerId+Day+Block,data=exp1.to.3.data,FUN=mean)
exp1.to.3.failed.noun.comprehension <- subset(exp1.to.3.scores.by.block,Block=='NounComprehension2' & score<0.7)
exp1.to.3.failed.sentence.comprehension <- subset(exp1.to.3.scores.by.block,Block=='SentenceComprehension1' & score<0.7)
ddply(exp1.to.3.failed.sentence.comprehension,~Day,summarise,N_excluded=length(unique(workerId)))
#since there is some data munging here, will set this up as a seperate data frame
exp1.to.3RecallVsInteractionData <- subset(exp1.to.3.data,(Block=="Interaction" | Block=="SentenceTest1") & grammatical & Day==4)
#want recall to be the reference level
exp1.to.3RecallVsInteractionData$Block <- relevel(droplevels(exp1.to.3RecallVsInteractionData$Block),ref="SentenceTest1")
exp1.to.3.recall.vs.interaction.summary <- aggregate(casemarked~Animacy+Block+EventType+ProportionMarked+workerId,data=exp1.to.3RecallVsInteractionData,FUN=mean)
#this is aggregating over animacy
exp1.to.3.recall.vs.interaction.summary.total <- aggregate(casemarked~Block+EventType+ProportionMarked+workerId,data=exp1.to.3RecallVsInteractionData,FUN=mean)
#prettier names for printing
exp1.to.3.recall.vs.interaction.summary$Block <- revalue(exp1.to.3.recall.vs.interaction.summary$Block,
c("SentenceTest1"="Recall",
"Interaction"="Interaction"))
exp1.to.3.recall.vs.interaction.summary.total$Block <- revalue(exp1.to.3.recall.vs.interaction.summary.total$Block,
c("SentenceTest1"="Recall",
"Interaction"="Interaction"))
exp1.to.3.recall.vs.interaction.summary.total$Animacy <- "All"
exp1.to.3interaction.direct.data$trialNumberMinus <- exp1.to.3interaction.direct.data$trialNumber-1
#add by-participant trial counter, setting first direct trial as 1
exp1.to.3interaction.direct.data <- subset(exp1.to.3RecallVsInteractionData,Block=="Interaction")
exp1.to.3interaction.direct.data$trialNumber <- plyr::ddply(exp1.to.3interaction.direct.data, plyr::.(workerId), plyr::mutate, id = seq_along(trialn))$id
exp1.to.3interaction.direct.data$casemarked <- as.numeric(exp1.to.3interaction.direct.data$casemarked)
exp1.to.3interaction.direct.data$trialNumberMinus <- exp1.to.3interaction.direct.data$trialNumber-1
contrasts(exp1.to.3interaction.direct.data$EventType)
contrasts(exp1.to.3interaction.direct.data$EventType) <- c(-0.5,0.5)
contrasts(exp1.to.3interaction.direct.data$Animacy) <- c(-0.5,0.5)
exp1.to.3casemarking.timecourse.model.1 <- glmer(casemarked ~ trialNumberMinus*Animacy * EventType + (1 + trialNumberMinus*Animacy | workerId),data=exp1.to.3interaction.direct.data,family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
exp1.to.3casemarking.timecourse.model.1 <- glmer(casemarked ~ trialNumberMinus*Animacy * EventType + (1 + trialNumberMinus*Animacy | workerId),data=exp1.to.3interaction.direct.data,family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp1.to.3casemarking.timecourse.model.1)
