---
title: "Experiment 1."
author: "Kenny Smith and Jennifer Culbertson"
date: "06/08/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(width = 300)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)

#load utility functions
source('../_Utilities.R')


#define colours - don't think Jenny likes these, but easy to change! 
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
```


# Introduction

Data analysis for Experiment 1. 


# Load the data.

```{r}
exp1Data <- read.csv('../RawData/exp1Data.csv')

#day needs to be a factor for the stats
exp1Data$Day <- as.factor(exp1Data$Day)

#at some point we switched terminology in the paper from Agents Can/Cannot be Patients to Subjects Can/Cannot Be Objects - need to correct this throughout
exp1Data$EventType <- revalue(exp1Data$EventType,
                              c("Agents Cannot Be Patients"="Subjects Cannot Be Objects",
                                "Agents Can Be Patients"="Subjects Can Be Objects"))

#it will be useful to have Subjects Cannot Be Objects as baseline
exp1Data$EventType <- relevel(as.factor(exp1Data$EventType),
                                        ref='Subjects Cannot Be Objects')

```

# Counts of participants and participant exclusions per day

```{r exp1-counts}
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.counts.table <- ddply(exp1Data,~Day,summarise,N=length(unique(workerId)))
exp1.counts.table

exp1.scores.by.block <- aggregate(score~workerId+Day+Block,data=exp1Data,FUN=mean)
exp1.failed.noun.comprehension <- subset(exp1.scores.by.block,Block=='NounComprehension2' & score<0.7)
exp1.failed.sentence.comprehension <- subset(exp1.scores.by.block,Block=='SentenceComprehension1' & score<0.7)
ddply(exp1.failed.sentence.comprehension,~Day,summarise,N_excluded=length(unique(workerId)))
```

# Counts of grammatical/ungrammatical trials
Including these so we can see how they were calculated.
```{r exp1-rejections}
aggregate(grammatical~Day,FUN=mean,data=subset(exp1Data,Block=="SentenceTest1"))
rejection.counts <- ddply(subset(exp1Data,Block=="SentenceTest1" & grammatical==0),~wordorder,summarise,N=length(unique(workerId)))
#ordered list of rejection types, if you want to see it - quite long
rejection.counts <- rejection.counts[order(-rejection.counts$N),]
```

# Results

## Identification accuracy on comprehension trials

```{r exp1-identification-accuracy-figure,echo=FALSE}

exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
                                    c("FALSE"="Patient not casemarked",
                                      "TRUE"="Patient casemarked"))

#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going 
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))



ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
  #facet by condition and marking
  facet_grid(EventType~casemarked) +
  #bars and CIs for score by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') + 
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
  #horizontal line showing chance
  geom_hline(yintercept=0.5,linetype=3) + 
  
  #by-participant data
  geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
               aes(x=Day, y=score, shape=Animacy),binaxis = "y", 
               stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
               position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
  
  # #by-participant data, adding in a point for all the perfect ones
  # geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
  #              aes(x=Day, y=score, shape=Animacy),binaxis = "y", 
  #              stackdir = "centerwhole",stackratio=0.1,alpha=0.5,dotsize=1,
  #              position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
  
  geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
  #geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') + 
  #force all points to be circles, and exclude from legend
  scale_shape_manual(values=c(19,19),guide=FALSE)+
  #then various axis/legend stuff
  xlab("Day") + 
  theme_bw() + 
  #ylab("Proportion correct responses") + 
  scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
  theme(legend.title=element_blank(),legend.position="top") + 
  scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) + 
  scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
  ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
```


```{r exp1-identification-accuracy-stat-1, cache=TRUE}
#this takes amazingly long, commenting out for now
exp1.score.model.1 <- glmer(score~casemarked * Day * EventType + (1 | workerId) + (0 + casemarked*Day | workerId),data=subset(exp1Data,Block=="SentenceComprehension1" & Animacy),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

Model 1 is singular, reducing.
```{r exp1-identification-accuracy-stat-2, cache=TRUE}
exp1.score.model.2 <- glmer(score~casemarked * Day * EventType + (1 | workerId) + (0 + casemarked+Day | workerId),data=subset(exp1Data,Block=="SentenceComprehension1" & Animacy),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

Model 2 is singular as well, reducing further.
```{r exp1-identification-accuracy-stat-3, cache=TRUE}
exp1.score.model.3 <- glmer(score~casemarked * Day * EventType + (1 | workerId) + (0 + casemarked | workerId),data=subset(exp1Data,Block=="SentenceComprehension1" & Animacy),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

Model 3 is singular as well, reducing further.
```{r exp1-identification-accuracy-stat-4, cache=TRUE}
exp1.score.model.4 <- glmer(score~casemarked * Day * EventType + (1 | workerId) + (0 + Day | workerId),data=subset(exp1Data,Block=="SentenceComprehension1" & Animacy),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

So everything apart from the (1|WorkerID) model is singular.
```{r exp1-identification-accuracy-stat-5, cache=TRUE}
exp1.score.model.simpler <- glmer(score~casemarked * Day * EventType + (1 | workerId),data=subset(exp1Data,Block=="SentenceComprehension1" & Animacy),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.score.model.simpler)
```


Performance at the intercept is significantly above 50\%, but is roughly what would be expected if participants made optimal use of word order cues to agency, 60\% of sentences used SOV order, which would yield an expected log odds of success for an attentive learner of:
```{r}
prob2logit(0.6)
```
, which is not significantly different from the success rates of our participants:
```{r}
my.logodds.p(0.6,exp1.score.model.simpler,"(Intercept)")
```

## Case marking and animacy during sentence recall

```{r exp1-casemarking}
exp1.casemarking.summary.by.animacy <- aggregate(casemarked~Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)

#this is aggregating over animacy
exp1.casemarking.summary.total <- aggregate(casemarked~Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)
#needs to have this column for plotting compatability with casemarking.summary.by.animacy
exp1.casemarking.summary.total$Animacy <- "All" 

ggplot(data=exp1.casemarking.summary.by.animacy, aes(x=Day, y=casemarked,
                                                     colour=Animacy,fill=Animacy)) +
  facet_grid(EventType~.) +
  #bars and CIs for casemarking by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') + 
  stat_summary(geom='point',fun.y='mean', position=position_dodge(0.9),size=3) +
  stat_summary(geom='point',fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
  
  #point 95CI for grand means
  stat_summary(data=exp1.casemarking.summary.total,aes(x=Day,y=casemarked),geom='errorbar',
               fun.data='mean_cl_boot',fun.ymin="min",
               fun.ymax="max",width=0.15,position=position_dodge(0.9),
               colour='black',show.legend = FALSE) +
  stat_summary(data=exp1.casemarking.summary.total,aes(x=Day,y=casemarked),geom='point', fun.y='mean', position=position_dodge(0.9),shape=19,size=3,show.legend = FALSE) +
  stat_summary(data=exp1.casemarking.summary.total,aes(x=Day,y=casemarked),geom='point', fun.y='mean', position=position_dodge(0.9),shape=1,size=3,colour='black',show.legend = FALSE) +
  
  #horizontal line showing input
  geom_hline(yintercept=0.6,linetype=3) +
  #by-participant data
  geom_dotplot(aes(x=Day, y=casemarked, shape=Animacy),binaxis = "y", stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=2,position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
  
  #force all points to be circles, and exclude from legend
  scale_shape_manual(values=c(21,21),guide=FALSE)+
  #then various axis/legend stuff
  xlab("Day") + 
  theme_bw() + 
  ylab("Proportion of case-marked patients") + 
  theme(legend.title=element_blank()) + 
  scale_fill_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  scale_colour_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  ggsave("../Figures/exp1-casemarking.pdf",width=9, height=9)

```

```{r exp1-casemarking-stat,cache=TRUE}
#Using a coding scheme such that the estimate for animacy and condition will be the effect of a one-unit difference - i.e. unlike contr.sum you don't have to double this.
exp1Data$Animacy <- factor(exp1Data$Animacy)
contrasts(exp1Data$Animacy) <- c(-0.5,0.5)
contrasts(exp1Data$EventType) <- c(-0.5,0.5)
exp1.case.marking.model.1 <- glmer(casemarked ~ Animacy * Day * EventType + (1 + Animacy * Day | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.case.marking.model.1)
```

Participants at day 2 produce case marking slightly more often than not --- the odds of producing a case marker are approximately 1.6 to 1, which is not significantly different from the frequency of case marking in the input (where case marking occurs on 60\% of objects, i.e. log odds of:

```{r}
prob2logit(0.6)
```
, n.s. different from the estimated log odds on Day 2,
```{r}
my.logodds.p(0.6,exp1.case.marking.model.1,"(Intercept)")
```

If I instead run this model on the full data set but setting day 4 as the intercept, there's absolutely no significant effect of animacy, indicating that while the relationship between animacy and case marking changes over the course of the experiment, participants' use of case markers on day 4 does not show a significant DOM-like effect.

Code day 4 as 0 to see if case marking is significantly affected by animacy on day 4
```{r exp1-casemarking-stat-reversed,cache=TRUE}
#code day 4 as 0 to see if case marking is significantly affected by animacy on day 4
exp1Data$DayR <- relevel(exp1Data$Day,ref='4')

exp1.case.marking.model.1.r <- glmer(casemarked ~ Animacy * DayR * EventType + (1 + Animacy * DayR | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```
```{r}
summary(exp1.case.marking.model.1.r)
```

## Identification accuracy during interaction

What does communicative accuracy look like in interaction?

```{r exp1-interaction-success}

#since there is some data munging here, will set this up as a seperate data frame
exp1InteractionSuccessData <- droplevels(subset(exp1Data,((Block=="Interaction" & grammatical) | (Block=="InteractionMatch")) & Day==4))
exp1InteractionSuccessData$Animacy <- as.factor(exp1InteractionSuccessData$Animacy)

exp1.interaction.success.summary <- aggregate(score~Block+Animacy+EventType+casemarked+workerId,data=exp1InteractionSuccessData,FUN=mean)

exp1.interaction.success.summary$casemarked <- revalue(as.factor(exp1.interaction.success.summary$casemarked),
                                    c("FALSE"="Patient not casemarked",
                                      "TRUE"="Patient casemarked"))
exp1.interaction.success.summary$Block <- plyr::revalue(exp1.interaction.success.summary$Block,
                                                        c("Interaction"="Participant Directs,\nSmeeble Matches",
                                                          "InteractionMatch"="Smeeble Directs,\nParticipant Matches"))

#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going 
#to withhold those dots and add a numerical annotation
exp1.interaction.success.summary$IsPerfect <- ifelse(exp1.interaction.success.summary$score==1,1,0)
exp1.interaction.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.interaction.success.summary,IsPerfect==1),Block,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.interaction.score.perfect.ns <- plyr::rename(exp1.interaction.score.perfect.ns,c("n.."="count"))
```


```{r exp1-interaction-success-plot}
ggplot(data=exp1.interaction.success.summary, aes(x=Block, y=score,
                                                  colour=Animacy,fill=Animacy)) +
  facet_grid(EventType~casemarked) +
  #points and CIs for casemarking by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min",
               fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') + 
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,
               shape=1,colour='black') +
  
  
  #horizontal line showing chance
  geom_hline(yintercept=0.5,linetype=3) +
  #by-participant data
  geom_dotplot(data=subset(exp1.interaction.success.summary,IsPerfect==0),aes(x=Block, y=score, shape=Animacy),binaxis = "y", stackdir = "center",alpha=0.5,dotsize=2,position=position_dodge(0.9),binpositions='all',binwidth=1/100) + 
  
  geom_text(data=exp1.interaction.score.perfect.ns,aes(x=Block,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
  #then various axis/legend stuff
  xlab("") + 
  theme_bw() + 
  scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
  theme(legend.title=element_blank()) + 
  scale_colour_manual(values=my.colours[c(2,3)],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) + 
  scale_fill_manual(values=my.colours[c(2,3)],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) + 
  ggsave("../Figures/exp1-interaction-success.pdf",width=9, height=6)
```

Stats-wise, do we see the difference in success rates reflecting participants' exploitation of the event structure in the Subjects Cannot Be Objects condition? Dummy-coding block and casemarking so I can see participant-directs, Subjects Cannot Be Objects as the intercept, and running the analysis only on trials where the patient is animate and the noun is not casemarked.

```{r exp1-interaction-success-stat-1, cache=TRUE}
#I am going to want to dummy-code this so Subjects Cannot Be Objects is baseline
contrasts(exp1InteractionSuccessData$EventType) <- NULL
#I am going to want to dummy-code this so participant-directs is baseline
contrasts(exp1InteractionSuccessData$Block) <- NULL


exp1.interaction.success.model.1 <- glmer(score ~ Animacy * Block * EventType + (1 + Animacy * Block | workerId),data=subset(exp1InteractionSuccessData,casemarked==FALSE),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

That produces singular fit, simlplifying by removing correlation.
```{r exp1-interaction-success-stat-2, cache=TRUE}
#I am going to want to dummy-code this so Subjects Cannot Be Objects is baseline
contrasts(exp1InteractionSuccessData$EventType) <- NULL
#I am going to want to dummy-code this so participant-directs is baseline
contrasts(exp1InteractionSuccessData$Block) <- NULL


exp1.interaction.success.model.1 <- glmer(score ~ Animacy * Block * EventType + (1 | workerId) + (0 + Animacy * Block | workerId),data=subset(exp1InteractionSuccessData,casemarked==FALSE),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```



## Case marking and animacy during interaction

```{r exp1-interaction-data}

#since there is some data munging here, will set this up as a seperate data frame
exp1RecallVsInteractionData <- subset(exp1Data,(Block=="Interaction" | Block=="SentenceTest1") & grammatical & Day==4)
#want recall to be the reference level
exp1RecallVsInteractionData$Block <- relevel(droplevels(exp1RecallVsInteractionData$Block),ref="SentenceTest1")

exp1.recall.vs.interaction.summary <- aggregate(casemarked~Animacy+Block+workerId+EventType,data=exp1RecallVsInteractionData,FUN=mean)
#this is aggregating over animacy
exp1.recall.vs.interaction.summary.total <- aggregate(casemarked~Block+EventType+workerId,data=exp1RecallVsInteractionData,FUN=mean)

#prettier names for printing
exp1.recall.vs.interaction.summary$Block <- revalue(exp1.recall.vs.interaction.summary$Block,
                                         c("SentenceTest1"="Recall",
                                           "Interaction"="Interaction"))
exp1.recall.vs.interaction.summary.total$Block <- revalue(exp1.recall.vs.interaction.summary.total$Block,
                                         c("SentenceTest1"="Recall",
                                           "Interaction"="Interaction"))
exp1.recall.vs.interaction.summary.total$Animacy <- "All" 
```


```{r exp1-interaction-plot}
ggplot(data=exp1.recall.vs.interaction.summary, aes(x=Block, y=casemarked, 
                                                    colour=Animacy, fill=Animacy)) +
  facet_grid(EventType~.) +
  #points and CIs for casemarking by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') + 
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,
               shape=1,colour='black') +
  
  #point 95CI for grand means
  stat_summary(data=exp1.recall.vs.interaction.summary.total,
                geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min",
                fun.ymax="max",width=0.15,position=position_dodge(0.9),
                color='black',show.legend = FALSE) +
  stat_summary(data=exp1.recall.vs.interaction.summary.total,geom='point', 
               fun.y='mean', position=position_dodge(0.9),size=3) +
  stat_summary(data=exp1.recall.vs.interaction.summary.total,geom='point', 
               fun.y='mean', position=position_dodge(0.9),size=3,
               shape=1,colour='black') +
   
  #horizontal line showing input
  geom_hline(yintercept=0.6,linetype=3) +
  #by-participant data
  geom_dotplot(aes(x=Block, y=casemarked, shape=Animacy),binaxis = "y", stackdir = "center",alpha=0.5,dotsize=1,position=position_dodge(0.9),binpositions='all',binwidth=1/100) + 
  #then various axis/legend stuff
  xlab("Block") + 
  theme_bw() + 
  ylab("Proportion of case-marked patients") + 
  theme(legend.title=element_blank()) + 
  scale_colour_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) + 
  scale_fill_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) + 
  ggsave("../Figures/exp1-interaction-casemarking.pdf",width=9, height=6)
```


```{r exp1-interaction-stat, cache=TRUE}
exp1RecallVsInteractionData$Animacy <- factor(exp1RecallVsInteractionData$Animacy)
contrasts(exp1RecallVsInteractionData$Animacy) <- c(-0.5,0.5)
contrasts(exp1RecallVsInteractionData$EventType) <- c(-0.5,0.5)
#I am going to want to dummy-code this so recall is baseline
contrasts(exp1RecallVsInteractionData$Block) <- NULL


exp1.recall.vs.interaction.model.1 <- glmer(casemarked ~ Animacy * Block * EventType + (1 + Animacy *  Block | workerId),data=exp1RecallVsInteractionData,family=binomial,control=glmerControl(optimizer="bobyqa"))
```

```{r}
summary(exp1.recall.vs.interaction.model.1)
```


## Relationship between animacy and word order

```{r exp1-wordorder}
exp1.sov.summary.by.animacy <- aggregate(isSOV~Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)
#this is aggregating over animacy
exp1.sov.summary.total <- aggregate(isSOV~Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)
#needs to have this column for plotting compatability with casemarking.summary.by.animacy
exp1.sov.summary.total$Animacy <- "All" 

ggplot(data=exp1.sov.summary.by.animacy, aes(x=Day, y=isSOV, fill=Animacy, colour=Animacy)) +
  facet_grid(EventType~.) +
  #points and CIs for word order by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3, shape=1, colour='black') +
  
  #point 95CI for grand means
  stat_summary(data=exp1.sov.summary.total,geom='errorbar', 
               fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.15,position=position_dodge(0.9),
               color='black',show.legend = FALSE) +
  stat_summary(data=exp1.sov.summary.total,geom='point', fun.y='mean', position=position_dodge(0.9),
               size=3) +
  stat_summary(data=exp1.sov.summary.total,geom='point', fun.y='mean', position=position_dodge(0.9),
               size=3, shape=1, colour='black') +
  
  
  #horizontal line showing input
  geom_hline(yintercept=0.6,linetype=3) +
  #by-participant data
  geom_dotplot(aes(x=Day, y=isSOV, shape=Animacy),binaxis = "y", stackdir = "center",alpha=0.5,dotsize=1,position=position_dodge(0.9),binpositions='all',binwidth=1/100) + 
  #then various axis/legend stuff
  xlab("Day") + 
  theme_bw() + 
  ylab("Proportion of SOV sentences") + 
  theme(legend.title=element_blank()) + 
  scale_colour_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  scale_fill_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  ggsave("../Figures/exp1-wordorder.pdf",width=9, height=9)
```

```{r exp1-wordorder-collapsed}
exp1.sov.summary.by.animacy.collapsed <- aggregate(isSOV~Animacy+Day+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)
#this is aggregating over animacy
exp1.sov.summary.total.collapsed <- aggregate(isSOV~Day+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)
#needs to have this column for plotting compatability with casemarking.summary.by.animacy
exp1.sov.summary.total.collapsed$Animacy <- "All" 

#for the collapsed dotplot, there are too many participants at ceiling to show the dots - instead I am going 
#to withhold those dots and add a numerical annotation
exp1.sov.summary.by.animacy.collapsed$IsPerfect <- ifelse(exp1.sov.summary.by.animacy.collapsed$isSOV==1,1,0)
exp1.sov.summary.by.animacy.collapsed$Day <- droplevels(exp1.sov.summary.by.animacy.collapsed$Day)
exp1.allsov.ns <- data.frame(summarize(group_by(subset(exp1.sov.summary.by.animacy.collapsed,IsPerfect==1 & Day!=1),Day,Animacy,.drop = FALSE),n()))
exp1.allsov.ns <- plyr::rename(exp1.allsov.ns,c("n.."="count"))



ggplot(data=exp1.sov.summary.by.animacy.collapsed, aes(x=Day, y=isSOV, fill=Animacy,colour=Animacy)) +
  
  
  #horizontal line showing input
  geom_hline(yintercept=0.6,linetype=3) +
  
  #by-participant data
  geom_dotplot(data=subset(exp1.sov.summary.by.animacy.collapsed,IsPerfect!=1),aes(x=Day, y=isSOV, shape=Animacy),binaxis = "y", stackdir = "center",alpha=0.5,dotsize=2,position=position_dodge(0.9),binpositions='all',binwidth=1/100) + 
  geom_text(data=exp1.allsov.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
  
  #points and CIs for word order by animacy
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3, shape=1, colour='black') +
  
  #point 95CI for grand means
  stat_summary(data=exp1.sov.summary.total.collapsed,geom='errorbar', 
               fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.15,position=position_dodge(0.9),
               color='black',show.legend = FALSE) +
  stat_summary(data=exp1.sov.summary.total.collapsed,geom='point', fun.y='mean', position=position_dodge(0.9),
               size=3) +
  stat_summary(data=exp1.sov.summary.total.collapsed,geom='point', fun.y='mean', position=position_dodge(0.9),
               size=3, shape=1, colour='black') +
  
  #then various axis/legend stuff
  xlab("Day") + 
  theme_bw() + 
  ylab("Proportion of SOV sentences") + 
  theme(legend.title=element_blank()) + 
  scale_colour_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  scale_fill_manual(values=my.colours,breaks=c("All","FALSE", "TRUE"),labels=c("All data","Inanimate patient", "Animate patient")) +
  ggsave("../Figures/exp1-wordorder-collapsed.pdf",width=9, height=4.5)
```

This produces a singular fit.

```{r exp1-wordorder-stat,cache=TRUE}

exp1.sovorder.model.1 <- glmer(isSOV ~ Animacy * EventType * Day + (1 + Animacy * Day | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

Simplifying, removing correlation between intercept and random slopes.
```{r exp1-wordorder-stat-2,cache=TRUE}

exp1.sovorder.model.2 <- glmer(isSOV ~ Animacy * EventType * Day + (1 | workerId) + (0 + Animacy * Day | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

Simplifying further, remove interaction in random slopes, converges
```{r exp1-wordorder-stat-3,cache=TRUE}
exp1.sovorder.model.3 <- glmer(isSOV ~ Animacy * EventType * Day + (1 + Animacy + Day | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.sovorder.model.3)
```


The log-odds of producing SOV order are significantly higher than the frequency of SOV in the input:

```{r}
my.logodds.p(0.6,exp1.sovorder.model.2,"(Intercept)")
```

Relevelled model, to test for effect of animacy on word order at day=4? It's still there, which is surprising looking at the graphs.
```{r exp1-wordorder-stat-relevel,cache=TRUE}
#NB simplified random effects to match model 2 above
exp1.sovorder.model.r <- glmer(isSOV ~ Animacy * EventType * DayR + (1 + Animacy + DayR | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.sovorder.model.r)
```

## Word order and case correlation

Recall that in the input SOV is more likely to be case marked than OSV. Very little suggestion that they learnt this, which could just indicate poor learning *or* that means they are over-producing case-markers with OSV and under-producing with SOV, which is consistent with the effect of animacy on word order.

```{r}

exp1.case.summary.by.order.collapsed <- aggregate(casemarked~Day+WordOrder+workerId,data=subset(exp1Data,Block=="SentenceTest1" & grammatical),FUN=mean)

#input levels
exp1.inputs <- data.frame(Day=rep(c(1,2,3),2),
                          WordOrder=rep(c('OSV','SOV'),each=3),
                          casemarked=rep(c(1/2,2/3),each=3))

ggplot(data=exp1.case.summary.by.order.collapsed, aes(x=Day, y=casemarked, fill=WordOrder, colour=WordOrder)) +
  #points and CIs for marking by word order
  stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),color='black') +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3) +
  stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9), size=3, shape=1, colour='black') +
  
  #horizontal lines showing input
  geom_errorbar(data=exp1.inputs, aes(x=Day,ymax=casemarked, ymin=casemarked),position=position_dodge(0.9),linetype=3) +
  
  #by-participant data
  geom_dotplot(aes(x=Day, y=casemarked, shape=WordOrder),binaxis = "y", stackdir = "center",alpha=0.5,dotsize=1,position=position_dodge(0.9),binpositions='all',binwidth=1/100) + 
  
  #then various axis/legend stuff
  xlab("Day") + 
  theme_bw() + 
  ylab("Proportion of case-marked patients") + 
  theme(legend.title=element_blank()) + 
  scale_fill_manual(values=my.colours) + 
  scale_colour_manual(values=my.colours) + 
  ggsave("../Figures/exp1-case-by-order-collapsed.pdf",width=9, height=4.5)
```



```{r exp1-wordorder-case-stat,cache=TRUE}
exp1.caseorder.model.1 <- glmer(casemarked ~ WordOrder * Day + (1 + WordOrder * Day | workerId),data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.caseorder.model.1)
```

## Effects of animacy controlling for word order?

Given that animacy influences both word order and case marking, and case marking is conditioned on word order, we might want to add word order as an additional predictor into the model - although we should worry about the effects of colinearity. We don't want word order interacting with Condition - I can't think why we would anyway - so the model specification is a bit hairy...


```{r exp1-casemarking-stat-2,cache=TRUE}

exp1.case.marking.model.2 <- glmer(casemarked ~ Animacy * Day * (WordOrder + EventType) 
                                   + (1 | workerId)
                                   + (0 + Animacy * Day * WordOrder | workerId),
                                   data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
```

That produces singular fit - simplifying by pulling out the 3-way interaction. Singular fit.

```{r exp1-casemarking-stat-3,cache=TRUE}

exp1.case.marking.model.3 <- glmer(casemarked ~ Animacy * Day * (WordOrder + EventType) 
                                   + (1 | workerId)
                                   + (0 + Animacy * WordOrder * Day - Day:Animacy:WordOrder   | workerId),
                                   data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
```

Trying pulling out additional interactions with day - two possibilities. Model 4 converges. This model produces the same pattern of results. As the plot below shows, the Animacy * Order interaction reflects the fact that all the action is happening on the OSV order trials. 
```{r exp1-casemarking-stat-5,cache=TRUE}

exp1.case.marking.model.4 <- glmer(casemarked ~ Animacy * Day * (WordOrder + EventType) 
                                   
                                   + (1 | workerId)
                                   + (0 + Animacy * WordOrder * Day 
                                      - Day:Animacy:WordOrder
                                      - Day:Animacy | workerId),
                                   data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))

exp1.case.marking.model.5 <- glmer(casemarked ~ Animacy * Day * (WordOrder + EventType) 
                                   + (1 | workerId)
                                   + (0 + Animacy * WordOrder * Day 
                                      - Day:Animacy:WordOrder
                                      - Day:WordOrder | workerId),
                                   data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.case.marking.model.4)
car::vif(exp1.case.marking.model.4)
```


Want to relevel that model and check for effect of animacy at day=4.

```{r exp1-casemarking-stat-4r,cache=TRUE}

exp1.case.marking.model.4r <- glmer(casemarked ~ Animacy * DayR * (WordOrder + EventType)
                                   + (1 | workerId)
                                   + (0 + Animacy * WordOrder * DayR 
                                      - DayR:Animacy:WordOrder
                                      - DayR:Animacy | workerId),
                                   data=subset(exp1Data,Block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
```

```{r}
summary(exp1.case.marking.model.4r)
```