- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- dayR:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:dayR:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * dayR * simplewordorder | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp1.case.marking.model.4r)
summary(exp1.case.marking.model.4)
car::vif(exp1.case.marking.model.4)
exp1.caseorder.model.3 <- exp1.caseorder.model.4
exp1.case.marking.model.2 <- exp1.case.marking.model.4
summary(exp1.case.marking.model.2)
car::vif(exp1.case.marking.model.2)
car::vif(exp1.case.marking.model.4)
summary(exp1.case.marking.model.4)
car::vif(exp1.case.marking.model.4)
exp1.case.marking.model.2 <- exp1.case.marking.model.4
car::vif(exp1.case.marking.model.2)
summary(exp1.case.marking.model.4)
summary(exp1.case.marking.model.2)
exp1.case.marking.model.3 <- glmer(casemarked ~ patient.is.animate.for.stats * day * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- day:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:day:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder + day  | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp1.case.marking.model.3)
car::vif(exp1.case.marking.model.3)
exp1.case.marking.model.3 <- glmer(casemarked ~ patient.is.animate.for.stats * day * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- day:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:day:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * day - day:patient.is.animate.for.stats:simplewordorder   | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
exp1.case.marking.model.4 <- glmer(casemarked ~ patient.is.animate.for.stats * day * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- day:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:day:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * day
- day:patient.is.animate.for.stats:simplewordorder
- day:patient.is.animate.for.stats | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
exp1.case.marking.model.5 <- glmer(casemarked ~ patient.is.animate.for.stats * day * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- day:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:day:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * day
- day:patient.is.animate.for.stats:simplewordorder
- day:simplewordorder | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp1.case.marking.model.4)
car::vif(exp1.case.marking.model.5)
summary(exp1.case.marking.model.4)
summary(exp1.case.marking.model.5)
summary(exp1.case.marking.model.4)
car::vif(exp1.case.marking.model.4)
exp1.case.marking.model.4r <- glmer(casemarked ~ patient.is.animate.for.stats * dayR * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- dayR:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:dayR:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * dayR
- dayR:patient.is.animate.for.stats:simplewordorder
- dayR:patient.is.animate.for.stats | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
stargazer(exp1.case.marking.model.4,
title="Experiment 1 casemarking in interaction",
align=TRUE,
intercept.bottom = FALSE,
single.row = TRUE,
digits=2,
report="vcsp*")
exp1.case.marking.model.4r <- glmer(casemarked ~ patient.is.animate.for.stats * dayR * simplewordorder * AgentsCanBePatients
- simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:simplewordorder:AgentsCanBePatients
- dayR:simplewordorder:AgentsCanBePatients
- patient.is.animate.for.stats:dayR:simplewordorder:AgentsCanBePatients
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * dayR
- dayR:patient.is.animate.for.stats:simplewordorder
- dayR:patient.is.animate.for.stats | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
summary(exp1.case.marking.model.4r)
exp1.case.marking.model.4 <- glmer(casemarked ~ patient.is.animate.for.stats * day * (simplewordorder + AgentsCanBePatients)
+ (1 | workerId)
+ (0 + patient.is.animate.for.stats * simplewordorder * day
- day:patient.is.animate.for.stats:simplewordorder
- day:patient.is.animate.for.stats | workerId),
data=subset(exp1Data,block=="SentenceTest1" & grammatical),family=binomial,control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=50000)))
knitr::opts_chunk$set(echo = TRUE)
options(width = 300)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
exp1Data <- read.csv('../RawData/exp1Data.csv')
#day needs to be a factor for the stats
exp1Data$Day <- as.factor(exp1Data$Day)
#it will be useful to have AgentsCannotBePatients as baseline
exp1Data$EventType <- relevel(as.factor(exp1Data$EventType),
ref='Agents Cannot Be Patients')
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.counts.table <- ddply(exp1Data,~Day,summarise,N=length(unique(workerId)))
exp1.counts.table
exp1.scores.by.block <- aggregate(score~workerId+Day+Block,data=exp1Data,FUN=mean)
exp1.failed.noun.comprehension <- subset(exp1.scores.by.block,Block=='NounComprehension2' & score<0.7)
exp1.failed.sentence.comprehension <- subset(exp1.scores.by.block,Block=='SentenceComprehension1' & score<0.7)
ddply(exp1.failed.sentence.comprehension,~Day,summarise,N_excluded=length(unique(workerId)))
aggregate(grammatical~Day,FUN=mean,data=subset(exp1Data,Block=="SentenceTest1"))
rejection.counts <- ddply(subset(exp1Data,Block=="SentenceTest1" & grammatical==0),~wordorder,summarise,N=length(unique(workerId)))
#ordered list of rejection types
rejection.counts <- rejection.counts[order(-rejection.counts$N),]
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
#dotplot is too busy, use jitered scatterplot
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
exp1.score.perfect.ns
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data, adding in a point for all the perfect ones
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
#by-participant data, adding in a point for all the perfect ones
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=subset(exp1.score.perfect.ns,count>0),aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
#by-participant data, adding in a point for all the perfect ones
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=0.1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
# #by-participant data, adding in a point for all the perfect ones
# geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
#              aes(x=Day, y=score, shape=Animacy),binaxis = "y",
#              stackdir = "centerwhole",stackratio=0.1,alpha=0.5,dotsize=1,
#              position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
?pbinom()
pbinom(5,10,0.5)
sum(dbinom(46:54, 100, 0.5))
sum(dbinom(45:90, 90, 0.5))
sum(dbinom(46:90, 90, 0.5))
sum(dbinom(0:90, 90, 0.5))
sum(dbinom(1:90, 90, 0.5))
sum(dbinom(2:90, 90, 0.5))
sum(dbinom(5:90, 90, 0.5))
sum(dbinom(10:90, 90, 0.5))
sum(dbinom(20:90, 90, 0.5))
sum(dbinom(30:90, 90, 0.5))
pbinom(45, size=90, prob=0.2)
pbinom(45, size=90, prob=0.5)
pbinom(44, size=90, prob=0.5)
pbinom(45, size=90, prob=0.5)
pbinom(55, size=90, prob=0.5)
pbinom(54, size=90, prob=0.5)
pbinom(53, size=90, prob=0.5)
pbinom(52, size=90, prob=0.5)
52/90
pbinom(53, size=90, prob=0.5)
pbinom(52, size=90, prob=0.5)
pbinom(53, size=90, prob=0.5)
53/90
54/90
pbinom(56, size=90, prob=0.5)
90*.7
pbinom(63, size=90, prob=0.5)
pbinom(55, size=90, prob=0.5)
pbinom(56, size=90, prob=0.5)
56/90
knitr::opts_chunk$set(echo = TRUE)
options(width = 300)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
exp1Data <- read.csv('../RawData/exp1Data.csv')
#day needs to be a factor for the stats
exp1Data$Day <- as.factor(exp1Data$Day)
#it will be useful to have AgentsCannotBePatients as baseline
exp1Data$EventType <- relevel(as.factor(exp1Data$EventType),
ref='Agents Cannot Be Patients')
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.counts.table <- ddply(exp1Data,~Day,summarise,N=length(unique(workerId)))
exp1.counts.table
exp1.scores.by.block <- aggregate(score~workerId+Day+Block,data=exp1Data,FUN=mean)
exp1.failed.noun.comprehension <- subset(exp1.scores.by.block,Block=='NounComprehension2' & score<0.7)
exp1.failed.sentence.comprehension <- subset(exp1.scores.by.block,Block=='SentenceComprehension1' & score<0.7)
ddply(exp1.failed.sentence.comprehension,~Day,summarise,N_excluded=length(unique(workerId)))
aggregate(grammatical~Day,FUN=mean,data=subset(exp1Data,Block=="SentenceTest1"))
rejection.counts <- ddply(subset(exp1Data,Block=="SentenceTest1" & grammatical==0),~wordorder,summarise,N=length(unique(workerId)))
#ordered list of rejection types
rejection.counts <- rejection.counts[order(-rejection.counts$N),]
aggregate(grammatical~Day,FUN=mean,data=subset(exp1Data,Block=="SentenceTest1"))
rejection.counts <- ddply(subset(exp1Data,Block=="SentenceTest1" & grammatical==0),~wordorder,summarise,N=length(unique(workerId)))
#ordered list of rejection types
rejection.counts <- rejection.counts[order(-rejection.counts$N),]
rejection.counts
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
# #by-participant data, adding in a point for all the perfect ones
# geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
#              aes(x=Day, y=score, shape=Animacy),binaxis = "y",
#              stackdir = "centerwhole",stackratio=0.1,alpha=0.5,dotsize=1,
#              position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
knitr::opts_chunk$set(echo = TRUE)
options(width = 300)
library(ggplot2)
library(plyr)
library(dplyr)
library(lme4)
#load utility functions
source('../_Utilities.R')
#define colours - don't think Jenny likes these, but easy to change!
#First one is neutral, e.g. for totals
my.colours <- c("#808080","#EA7D00","#006DE9")
exp1Data <- read.csv('../RawData/exp1Data.csv')
#day needs to be a factor for the stats
exp1Data$Day <- as.factor(exp1Data$Day)
#at some point we switched terminology in the paper from Agents Can/Cannot be Patients to Subjects Can/Cannot Be Objects - need to correct this throughout
exp1Data$EventType <- revalue(exp1Data$EventType,
c("Agents Cannot Be Patients"="Subjects Cannot Be Objects",
"Agents Can Be Patients"="Subjects Can Be Objects"))
#it will be useful to have Subjects Cannot Be Objects as baseline
exp1Data$EventType <- relevel(as.factor(exp1Data$EventType),
ref='Subjects Cannot Be Objects')
version()
Rversion()
R.version
exp1Data <- read.csv('../RawData/exp1Data.csv')
#day needs to be a factor for the stats
exp1Data$Day <- as.factor(exp1Data$Day)
#at some point we switched terminology in the paper from Agents Can/Cannot be Patients to Subjects Can/Cannot Be Objects - need to correct this throughout
exp1Data$EventType <- revalue(exp1Data$EventType,
c("Agents Cannot Be Patients"="Subjects Cannot Be Objects",
"Agents Can Be Patients"="Subjects Can Be Objects"))
#it will be useful to have Subjects Cannot Be Objects as baseline
exp1Data$EventType <- relevel(as.factor(exp1Data$EventType),
ref='Subjects Cannot Be Objects')
#got this from https://stackoverflow.com/questions/12840294/counting-unique-distinct-values-by-group-in-a-data-frame
exp1.counts.table <- ddply(exp1Data,~Day,summarise,N=length(unique(workerId)))
exp1.counts.table
exp1.scores.by.block <- aggregate(score~workerId+Day+Block,data=exp1Data,FUN=mean)
exp1.failed.noun.comprehension <- subset(exp1.scores.by.block,Block=='NounComprehension2' & score<0.7)
exp1.failed.sentence.comprehension <- subset(exp1.scores.by.block,Block=='SentenceComprehension1' & score<0.7)
ddply(exp1.failed.sentence.comprehension,~Day,summarise,N_excluded=length(unique(workerId)))
aggregate(grammatical~Day,FUN=mean,data=subset(exp1Data,Block=="SentenceTest1"))
rejection.counts <- ddply(subset(exp1Data,Block=="SentenceTest1" & grammatical==0),~wordorder,summarise,N=length(unique(workerId)))
#ordered list of rejection types, if you want to see it - quite long
rejection.counts <- rejection.counts[order(-rejection.counts$N),]
exp1.score.summary <- aggregate(score~casemarked+Animacy+Day+EventType+workerId,data=subset(exp1Data,Block=="SentenceComprehension1"),FUN=mean)
exp1.score.summary$casemarked <- revalue(as.factor(exp1.score.summary$casemarked),
c("FALSE"="Patient not casemarked",
"TRUE"="Patient casemarked"))
#for the dotplot, there are too many participants at ceiling to show the dots - instead I am going
#to withhold those dots and add a numerical annotation
exp1.score.summary$IsPerfect <- ifelse(exp1.score.summary$score==1,1,0)
exp1.score.perfect.ns <- data.frame(summarize(group_by(subset(exp1.score.summary,IsPerfect==1),Day,Animacy,casemarked,EventType,.drop = FALSE),n()))
exp1.score.perfect.ns <- plyr::rename(exp1.score.perfect.ns,c("n.."="count"))
ggplot(data=exp1.score.summary, aes(x=Day, y=score, fill=Animacy,colour=Animacy)) +
#facet by condition and marking
facet_grid(EventType~casemarked) +
#bars and CIs for score by animacy
stat_summary(geom='errorbar', fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",width=0.3,position=position_dodge(0.9),colour='black') +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3) +
stat_summary(geom='point', fun.y='mean', position=position_dodge(0.9),size=3,shape=1,colour='black') +
#horizontal line showing chance
geom_hline(yintercept=0.5,linetype=3) +
#by-participant data
geom_dotplot(data=subset(exp1.score.summary,IsPerfect==0),
aes(x=Day, y=score, shape=Animacy),binaxis = "y",
stackdir = "centerwhole",stackratio=1,alpha=0.5,dotsize=1,
position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
# #by-participant data, adding in a point for all the perfect ones
# geom_dotplot(data=subset(exp1.score.summary,IsPerfect==1),
#              aes(x=Day, y=score, shape=Animacy),binaxis = "y",
#              stackdir = "centerwhole",stackratio=0.1,alpha=0.5,dotsize=1,
#              position=position_dodge(0.9),binpositions='all',binwidth=1/100) +
geom_text(data=exp1.score.perfect.ns,aes(x=Day,y=1.05,label=count),position=position_dodge(0.9),size=3,colour='black') +
#geom_point(aes(x=Day, y=score,shape=Animacy),alpha=0.2,dotsize=1,position=position_jitterdodge(jitter.width= 0.3, jitter.height = 0,dodge.width = 0.9),fill='black') +
#force all points to be circles, and exclude from legend
scale_shape_manual(values=c(19,19),guide=FALSE)+
#then various axis/legend stuff
xlab("Day") +
theme_bw() +
#ylab("Proportion correct responses") +
scale_y_continuous(name="Proportion correct responses",breaks=seq(0,1,0.25)) +
theme(legend.title=element_blank(),legend.position="top") +
scale_fill_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
scale_colour_manual(values=my.colours[2:3],breaks=c("FALSE", "TRUE"),labels=c("Inanimate patient", "Animate patient")) +
ggsave("../Figures/exp1-identification-accuracy.pdf",width=9, height=9)
sessionInfo()
library(lme4)
